-----------------------------------------ASYNC ACTIONS-----------------------------------------------------------------
- first thing is to decide how to structure the action
- we will create the action and then then I think the actual api call get passed into it
- we will have to rework the state

- we are going the multiple type approach with the actions because it will leave less room for errors
-I am dumb, I should just make the action creators that I have now into async Creators
- normaly an action creator will return an object but with middleware in play it allows us to return functions
- these returned functions will be used to make async calls and will be called by the middleware
- this action creator becomes a thunk

- so the way that they have it is that they have one big asyn function with three smaller funtions running inside of it
- so I think that my smaller action creators that I currently have are going to be the smaller functions that I
will call in my larger async action creator. I will have them be returned and then they can be called by the middleware

- I think I know where things are going now.
- basically we have an action creator that returns a function and inside that function we have some async code run
and then we will pass the results of that code into our normal synchronous action creator.
- so now I will go read up on async programming and promises. we are going to use a promise to make the api call

PROMISES
-the promise object represents the completion or failure of the async operation. its an intermediate state
- the .then() are used for callback functions that will run if the previous operation is successful
-async operations like promises are put into an event queue.which runs after the main thread
- we are going to place our action creator call inside of an .then()method
- so I will create a new promise and
- the promise constructor is used to wrap functions that do not already support promises
- the new promise object takes an executor function as a parameter
- the executor is custom code but it should go like this. executor(resolutionFunc, rejectionFunc)
- so it goes like this, the operation within the executor is asynchronous and provides a callback. the callback
within the executor code.The callback terminates by invoking resolutionFunc. The invocation of resolutionFunc includes
a value parameter. The value is passed back to the tethered PromiseObj. The promiseObj the asynchronous invokes the
.then() associated with it
- right, so we have to write the executor. for the executor is just going to be a callback function. Just so I can see
how things are working out.
- not sure if my implementation works or not. but I have to put in the middleware before I can find out.

--------------------------------------MIDDLESWARE---------------------------------------------------------------------------
-in Redux MiddleWareprovides a third party extension point between dispatching an aciton and the moment it reaches
the reducer
- we are going to monkeypatch the dispatch function. Since the redux store is just a plain object with a few methods
 we just access the dispatch method on the state object and change it
 - the Redux documentation has a lot of info about making your own middleware but for the moment I want to just use
 the recommended redux-thunk

 -I honest just might be doing a whole code redo with some new libraries to make things clean
 - right now I am just going to try and get the thing to work

 WHAT IS A THUNK
- generally thunks are a functional propgramming technique used to delay computation
- the idea is that you return a function that will be called later
- redux-thunk passes two arguments to the think: dispatch and getState.
- now if everything workouts out as planned, this should work as planned
- it didnt go to plan. The problem that I am having right now is that the chill reducer isn't being run
-as i suspected, it is my .then()method that is not working properly. it just isn't being called.
- Think I know what is wrong, I didn't pass any functions into my executor function. This is what is causing the problem.
- the executor by itself has no meaningful return value, it communicates via the side-effect caused by the resolution or
rejectionFunc. the side effect is that the promiseObj becomes settled
-so to solve my problem, the only thing that I need to do is add the function that I am going to call in as a parameter
- the executor has the opportunity to perform some operation and then reflect the operation's outcome. but returning
the call with an invocation or either the rejection/ resolve function.
- we have now got the .then() being called. The problem now is getting the action creator to fire
- actually the chill function is being called. SO the problem must fall to the reducer.the action creator is being
called but it isnt actually changing the state.
- I think that my problem is that I am not dispatching the action with the literal dispatch method

------------------------------------TESTING----------------------------------------------------------------------------------
- I installed es lint and I am starting to configure it a bit
-the rules of test driven development
1)program the tests first
2)Run the tests and watch them fail(red), before you write the code
3)write the minimum amount of code required to make the tests pass(green)
4)refector the code and tests(gold)
5) once the code has passed the tests, it is then time to take a closer look at your code and make it more beautiful

- now we will be testing reducers, since reducers are pure functions that calculate and return data based on their
input arguments. If we can control the input, then we can predict the output
- so es lint is not acctualy a testing framework. It does what is called linting. linting basically analyzes the
codes syntax for errors. It is to make sure that we have proper code formatting. It is not a testing framework
- now we have to install a testing framework
- so I now have jest installed globally so i can run it from anywhere and as a dependency on my project.
- so this is how it would go. you create your file and then you do a module.export of the function
- then you create the test file, called whatever.test.js i beleive the .test is used to tell jest what file to test
- you then import the function with a require(filepath). then follow the required testing function calls.

what is the module.export:
- it seems that it is the way that node exports stuff from one file to another

 what is the require('./filepath')
 - on a side note, I see the commonJS module pattern mentioned everywhere, later when I refactor my code, after I am
 done with the tests. I will have to look into it.
- the require is the way that you import functions(modules) into other files.

- so apparently jest has two important functions. one is called describe, which is used to create a suite of tests
and it, which is used for each test.
- you would use describe to block together several related tests
-the it function is literally the same thing as test function. so the two can be switched out.
- so basically we will import the reducer, give it a fake action and state and then use .expect to say what we
expect the result to be
- so first lets get some tests up and running for the syncronous reducer
- combine Reducers looks like it is just returning an object and I can use dot notation to access the reducers
for the tests
- so the importing funcitons into my test suits is going a little weird with all my spaghetti code. I think its
time to make things modular.
- the problem that I am getting is an import problem and that could be do to the fact that I am running it on node
and node wants to use moduels instead of the normal import statements. So I think If i just import everything
normaly and then run it with jest, then it should all work out ok.
- now I am installing some decencies that are needed for testing in Redux

-with all the importing that I am doing, I think I should just make my code modular now, so that IT doesnt get
worse than it already is.
- well I guess actually I am suppose to do the tests first so that is what I will do.
- first I will import the action creators into my test file.
- so I have installed everything and configured the code, so that jest recognizes the import statements.
- the problem that I am starting to have now is that the I am getting the error that toBe or toEqual is not a function
- I have a theory that this could be the error that gets thrown out when the code is wrong, so I will run it with
code that i know is 100% the same
- So my hypothesis was right, it only seems to throw that error when the functions are different. now to really
test that I will now make the chill and the expected actions be the exact same thing
- now I have a better understanding about why it was throwing that error, for the moment is seems that it was
throwing that error because either the return value was not the correct type or because the functions were not
the same.
- I think that the return value must not be correct because jest is used by Facebook and i doubt that they would
throw this weird error for something as simple as the functions don't match.
- now I am going to have to add the actions information back line by line to test and see where it trips up.
not the most effective but It will work.
- so right off the bat I have a problem, it could steam from the fact that the chill action creator is returning
an object and the expected action is returning a reference to an action. That is the only reason I can think of
for why its not running properly.
- I changed matcher function from toBe to toEqual and that seemed to make things work. I will read up more on
toEqual() to find out why it worked this way
- so i guess when the error says toBe is not a function I should listen to it, because when I changed to a different
matcher function it worked.... FML
- now everything seems to work

toEqual(value)
- it recursively calls object.is to compare the privative value(data that is not an object or has methods)
Object.is() is a method that determines whether two values are the same value. It is not the same as loose or strict
equality Object.is() is a new ES2015 comparison. it does not type coersion and does not handle special cases

-now i will get the synchronous action creator up and going and then ill go after the async one
- cool so now the test are seeming to all work.
- so now I have the synchronous actions working. I will get async one up and running
- for some reason my async action isnt working, time to make it work again

-----------------------------------BACK TO THE ASYNC ACTION-------------------------------------------------------
- I thought that I had finished this but when I went to run the tests, it appears that I just got it to fire and
not actually return anything
- I think That trying to force the api into a promise might be a mistake, I should just use a callback instead
- you put the async keyword infront of a function to turn it into a async function. this means that it takes
place in the event que and it returns a promise
- so maybe I could make the function that gets called by the thunk middleware into an async one, this would give us
the promise that we are trying to get. I will read more and report back
- so the middleware is going to return a function and that function can return a value. In our case that value
is going to be a promise.
- the await keyword causes the async function to pause until a Promise is settled after it is settled, the function
is returned
- so what we want to do is have an async function make an await call the GEO api and then return that value. That
value should be a promise and then we make the dispatch call with that value. easy peasy lemon squeezy.
- an await can split execution flow. allowing the caller of the await's function to resume execution. I think
in our case, everything should be fine.
- we are getting the value, we are just not waiting for the call to happen

ASYN CALLBACKS
- functionst that are specified as arguments when calling a function which will start executing code in the
background , when the background code finishes then the callback function is fired
- so I need to read up on callbacks
- I think I turn it inro a function using the async/await keywords
- you put the async keyword infront of a function and it lets you use the await keyword
- their return values are guaranteed to be converted to promises

- so my fault obvously lis in not understanding async code.
- I beleive that my struggle with the api is my lack of understanding of async code. I will now read up on async code
- the two types are callbacks and promises
- it seems like we have a promise run, make the call and then when the info is returned back have the action
dispatched with the geo location info that is returned back
- async operations like promises are put into the event queue which runs after the main thread
- I should understand how the async data flow works with redux first and then design my code

- the function called by the thunk middleware can return a value, that is passed on as the return value
of the dispatch method. in the example they return a promise to wait for. this is not required by the middleware
but it is convient. SO I think we have to return a promise and then make the dispatch inside the .then() method
- also don't use catch inside in this redux function, it will cause a loop
- So I have not been able to crack the code on what the hell is happening with the promises and API but I think
I found another way around. i will get the initial values on load, store them in the local storage and then
get thos values to the actions when the button is clicked, so they can be dispatched.

-ok so I used local session storage to get around the problem I was having with the GEO location api
- now I will start on the async tests



------------------------------------ASYNC ACTION TESTS----------------------------------------------------------------------
- for testing actions that use middleware, it is best to just 100% mock the Redux store for the test
- we will need to use redux-mock-store and fetch-mock
- I actually don't think that I need to use the fetch-mock because im not fetching anything
- for the time being we are just going to ignore that async action tests, we are going to move onto reducers. THe
file that it is telling me to install is throwing some funky errors. so For the time being i will just move onto
the reducers
- the mock store will create an array of dispatched actions which serve as an action log for tests
- I just realized that I don't even think that my actions are actually async.
- so turns out my actions arent even async any more.... well I guess that clears things up a bit.
-----------------------------------REDUCER TESTS----------------------------------------------------------------------------
- reducers should return the new state after applying the action to the previous state and that's the behavior
tested
- the first thing that we will do is inport the reducers and the types

----------------------------------COMPONENT TESTS----------------------------------------------------------------------------
-A component is usually small and only rely on their props. This makes them easy to test
- we need to install enzyme
- apparently what was happening with my npm install was a weird but, that was solved with deleting my package-lock.json and my node
modules. then I ran npm install and that seemed to smooth the problem out.
